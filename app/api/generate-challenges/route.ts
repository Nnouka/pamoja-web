import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

interface GenerateChallengesRequest {
  content: string;
  fileType: 'text' | 'pdf' | 'audio' | 'image';
  subject?: string;
  tags: string[];
  difficulty?: 'easy' | 'medium' | 'hard';
  count?: number;
}

export async function POST(request: NextRequest) {
  try {
    const body: GenerateChallengesRequest = await request.json();
    const { content, fileType, subject, tags, difficulty = 'medium', count = 5 } = body;

    // Validate content
    if (!content || content.trim().length < 10) {
      return NextResponse.json(
        { error: 'Content is too short to generate meaningful challenges' },
        { status: 400 }
      );
    }

    // Limit challenge count to maximum of 10
    const maxChallenges = 10;
    const challengeCount = Math.min(count, maxChallenges);
    
    if (count > maxChallenges) {
      console.log(`Challenge count requested (${count}) exceeds maximum (${maxChallenges}). Limiting to ${maxChallenges}.`);
    }

    // Create a comprehensive prompt for OpenAI
    const systemPrompt = `You are an expert educational content creator who generates high-quality learning challenges from study materials. Your challenges should be:

1. Directly based on the provided content
2. Appropriate for the specified difficulty level
3. Educational and thought-provoking
4. Clear and unambiguous
5. Include helpful explanations

Generate a mix of question types: multiple-choice, true-false, short-answer, and fill-in-the-blank.`;

    const userPrompt = `Based on the following ${fileType} content, generate exactly ${challengeCount} educational challenges at ${difficulty} difficulty level.

${subject ? `Subject: ${subject}` : ''}
${tags.length > 0 ? `Tags: ${tags.join(', ')}` : ''}

Content:
${content}

Requirements:
- Generate exactly ${challengeCount} challenges
- Use a mix of question types: multiple-choice (4 options), true-false, short-answer, fill-in-the-blank
- Each challenge should test understanding of specific concepts from the content
- Provide clear explanations for each answer
- Make questions specific to the actual content provided

Format your response as valid JSON with this exact structure:
{
  "challenges": [
    {
      "type": "multiple-choice",
      "question": "Question text here",
      "options": ["A", "B", "C", "D"],
      "correctAnswer": "A",
      "explanation": "Explanation here",
      "difficulty": "${difficulty}"
    },
    {
      "type": "true-false", 
      "question": "Statement to evaluate",
      "correctAnswer": "True",
      "explanation": "Explanation here",
      "difficulty": "${difficulty}"
    }
  ]
}`;

    console.log('Calling OpenAI API for challenge generation...');
    
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini", // Using the more cost-effective model
      messages: [
        {
          role: "system",
          content: systemPrompt
        },
        {
          role: "user", 
          content: userPrompt
        }
      ],
      temperature: 0.7,
      max_tokens: 2500,
      response_format: { type: "json_object" }
    });

    const aiResponse = response.choices[0].message.content;
    if (!aiResponse) {
      throw new Error('No response from OpenAI');
    }

    console.log('OpenAI response received:', aiResponse.slice(0, 200) + '...');
    
    const result = JSON.parse(aiResponse);
    
    // Validate the response structure
    if (!result.challenges || !Array.isArray(result.challenges)) {
      throw new Error('Invalid response format from OpenAI');
    }

    // Ensure we have the right number of challenges
    if (result.challenges.length === 0) {
      throw new Error('No challenges generated by OpenAI');
    }

    console.log(`Successfully generated ${result.challenges.length} challenges`);
    
    return NextResponse.json({
      challenges: result.challenges,
      message: `Generated ${result.challenges.length} AI-powered challenges successfully`
    });

  } catch (error) {
    console.error('Error generating challenges with OpenAI:', error);
    
    // Fallback to basic challenges if OpenAI fails
    const fallbackChallenges = [{
      type: 'short-answer' as const,
      question: 'What are the key concepts discussed in this content?',
      correctAnswer: 'The key concepts include the main ideas and important details presented in the uploaded material.',
      explanation: 'This is a fallback question generated when AI processing is unavailable.',
      difficulty: 'medium' as const
    }];
    
    return NextResponse.json(
      { 
        challenges: fallbackChallenges,
        message: 'Generated fallback challenges (AI service temporarily unavailable)',
        warning: 'Using fallback mode - please try again later for AI-generated challenges'
      },
      { status: 200 }
    );
  }
}

// Example with real OpenAI integration (commented out)
/*
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(request: NextRequest) {
  try {
    const body: GenerateChallengesRequest = await request.json();
    const { content, fileType, subject, tags, difficulty = 'medium', count = 5 } = body;

    const prompt = `
Based on the following ${fileType} content, generate ${count} educational challenges at ${difficulty} difficulty level.

Subject: ${subject || 'General'}
Tags: ${tags.join(', ') || 'None'}

Content: ${content}

Please generate a mix of question types: multiple-choice, true-false, short-answer, and fill-in-the-blank.
Format the response as JSON with this structure:
{
  "challenges": [
    {
      "type": "multiple-choice|true-false|short-answer|fill-blank",
      "question": "Question text",
      "options": ["option1", "option2", "option3", "option4"], // only for multiple-choice
      "correctAnswer": "correct answer",
      "explanation": "explanation of the answer",
      "difficulty": "${difficulty}"
    }
  ]
}
`;

    const response = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "You are an educational content creator that generates high-quality learning challenges from study materials."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 2000
    });

    const result = JSON.parse(response.choices[0].message.content || '{"challenges": []}');
    
    return NextResponse.json(result);

  } catch (error) {
    console.error('Error with OpenAI API:', error);
    return NextResponse.json(
      { error: 'Failed to generate challenges with AI' },
      { status: 500 }
    );
  }
}
*/